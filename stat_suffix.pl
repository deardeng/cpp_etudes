#!/usr/bin/bash

use warnings;
use strict;

# 这段 Perl 代码是一个单行脚本，用于统计文件路径中不超过 16 个字符长度的文件扩展名出现的次数，并按照次数从高到低进行排序打印。
#
# 让我们逐步解释这段代码：
#
#         perl -lne '$count->{$1}+=1 if m{/[^/]+\.(\w+)$}}{print join "\n", map {$_->[0] .":". $_->[1]} sort{$b->[1] <=> $a->[1]} map{[$_, $count->{$_}]} grep {length($_)<16} keys %$count'
#             -lne 是 Perl 命令行参数，-l 用于自动处理行尾的换行符，-n 用于逐行处理输入，-e 后面跟着要执行的 Perl 代码。
#
# $count->{$1}+=1 if m{/[^/]+\.(\w+)$} 是一个正则表达式匹配。它匹配以 / 开头，不包含 / 字符的文件路径，然后匹配以 . 开头的文件扩展名，并将扩展名捕获到 $1 变量中。如果匹配成功，则给 $count->{$1} 对应的值加 1，即统计该扩展名出现的次数。
#
# }{ 是 Perl 中的特殊操作符，用于分隔代码块。在这段代码中，它将正则表达式匹配和打印操作分隔开。
#
# print join "\n", map {$_->[0] .":". $_->[1]} sort{$b->[1] <=> $a->[1]} map{[$_, $count->{$_}]} grep {length($_)<16} keys %$count 是打印操作的部分。
#
# keys %$count 获取哈希变量 $count 的所有键（即文件扩展名）。
#
# grep {length($_)<16} 对键进行过滤，只保留长度小于 16 的键。
#
# map{[$_, $count->{$_}]} 将过滤后的键和对应的值组成一个数组引用的列表。
#
# sort{$b->[1] <=> $a->[1]} 对列表按照值（次数）进行降序排序。
#
# map {$_->[0] .":". $_->[1]} 对排序后的列表进行映射，将键和值拼接成字符串。
#
# print join "\n", ... 用换行符连接字符串并打印。
#
# 因此，该代码将统计文件路径中不超过 16 个字符长度的文件扩展名的出现次数，并按照次数从高到低进行排序打印。

find | perl -lne '$count->{$1}+=1 if m{/[^/]+\.(\w+)$}}{print join "\n", map {$_->[0] .":". $_->[1]} sort{$b->[1] <=> $a->[1]} map{[$_, $count->{$_}]} grep {length($_)<16}keys %$count'
